#!/usr/bin/env python3

import github3 as github
import argparse
import os
import mimetypes
import urllib.request
import urllib.parse
import glob
import requests
from requests.auth import HTTPBasicAuth
import shutil

parser = argparse.ArgumentParser(description='sync release files')
parser.add_argument('--release', help='release to sync with', required=True)
parser.add_argument('--update', help='update release', action='store_true')
parser.add_argument('target', nargs='*')
args = parser.parse_args()

assert len(args.target) == 1, args.target
args.target = args.target[0]

assert os.path.isdir(args.target) or not os.path.exists(args.target), args.target
os.makedirs(args.target, exist_ok = True)

token = os.environ['GITHUB_TOKEN']

gh = github.GitHub(token=token, session=github.session.GitHubSession(default_read_timeout=60))
repo = gh.repository(*os.environ['GITHUB_REPOSITORY'].split('/'))
release = repo.release_from_tag(args.release)
assets = { asset.name: asset for asset in release.assets() }

def filesize(path, suffix='B'):
  num = os.path.getsize(path)
  for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
    if abs(num) < 1024.0:
      return "%3.1f%s%s" % (num, unit, suffix)
    num /= 1024.0
  return "%.1f%s%s" % (num, 'Yi', suffix)

if args.update:
  print('updating cache to', os.environ['GITHUB_REPOSITORY'], args.release)
  for f in glob.glob(os.path.join(args.target, '*')):
    if not os.path.basename(f) in assets:
      print(' +', os.path.basename(f), end='')
      content_type, encoding = mimetypes.guess_type(f)
      release.upload_asset(asset=f, name=os.path.basename(f), content_type=content_type)
      print(f' ({filesize(f)})')
  for name, asset in assets.items():
    if not os.path.exists(os.path.join(args.target, name)):
      asset.delete()
      print(' -', name)
else:
  print('restoring cache from', os.environ['GITHUB_REPOSITORY'], args.release)
  headers = {
    'User-Agent': 'requests',
    'Accept': 'application/octet-stream',
    'Authorization': f'token {token}',
  }
  for name, asset in assets.items():
    #with requests.get(asset.url, auth=HTTPBasicAuth(token, ''), allow_redirects=True, stream=True, headers={'Accept': 'application/octet-stream'}) as r:
    #with requests.get(asset.url.replace('https://', f'https://{token}:@'), allow_redirects=True, stream=True, headers={'Accept': 'application/octet-stream'}) as r:
    with requests.get(asset.url, allow_redirects=True, stream=True, headers=headers) as r:
      print(' +', name, end='')
      with open(os.path.join(args.target, name), 'wb') as f:
        shutil.copyfileobj(r.raw, f)
      print(f' ({filesize(os.path.join(args.target, name))})')
