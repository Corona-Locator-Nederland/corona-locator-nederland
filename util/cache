#!/usr/bin/env python3

import github3 as github
import argparse
import os
import mimetypes
import urllib.request
import urllib.parse
import glob
import requests
from requests.auth import HTTPBasicAuth
import shutil
import time
from tempfile import NamedTemporaryFile

def filesize(arg):
  factor = 1
  if not arg[-1].isdigit():
    try :
      factor = {'k': 1024, 'M': 1024**2, 'G': 1024**3}[arg[-1]]
      arg = arg[:-1]
    except KeyError:
      raise argparse.ArgumentTypeError(f'{arg[-1]} is not a valid size unit')
  try:
    return factor * int(arg)
  except ValueError:
    raise argparse.ArgumentTypeError(f'{arg} is not a valid size')

parser = argparse.ArgumentParser(description='sync release files')
parser.add_argument('--release', help='release to sync with', required=True)
parser.add_argument('--update', help='update release', action='store_true')
parser.add_argument('--min', help='minimum size', type=filesize)
parser.add_argument('target', nargs='*')
args = parser.parse_args()

assert len(args.target) == 1, args.target
args.target = args.target[0]

assert os.path.isdir(args.target) or not os.path.exists(args.target), args.target
os.makedirs(args.target, exist_ok = True)

token = os.environ['GITHUB_TOKEN']

gh = github.GitHub(token=token, session=github.session.GitHubSession(default_read_timeout=60))
repo = gh.repository(*os.environ['GITHUB_REPOSITORY'].split('/'))
release = repo.release_from_tag(args.release)
assets = { asset.name: asset for asset in release.assets() }

def humanize(num, suffix='B'):
  if type(num) == str:
    num = os.path.getsize(num)
  for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
    if abs(num) < 1024.0:
      return "%3.1f%s%s" % (num, unit, suffix)
    num /= 1024.0
  return "%.1f%s%s" % (num, 'Yi', suffix)

def retrieve(url, path):
  headers = {
    'User-Agent': 'requests',
    'Accept': 'application/octet-stream',
    'Authorization': f'token {token}',
  }
  with requests.get(url, allow_redirects=True, stream=True, headers=headers) as r:
    if type(path) == str:
      with open(path, 'wb') as f:
        shutil.copyfileobj(r.raw, f)
    else:
      shutil.copyfileobj(r.raw, path)

def assetsize(path):
  asset = next(asset for asset in release.assets() if asset.name == os.path.basename(path))
  if asset.size != os.path.getsize(path):
    return asset.size

  with NamedTemporaryFile() as tmp:
    retrieve(asset.url, tmp)
    tmp.seek(0, 2)
    return tmp.tell()

if args.min:
  for name, asset in list(assets.items()):
    if asset.size < args.min:
      print(' - removing undersized', name, 'of size', humanize(asset.size), 'where I need at least', humanize(args.min))
      asset.delete()
      del assets[name]

if args.update:
  print('updating cache to', os.environ['GITHUB_REPOSITORY'] + '@' + args.release, 'from', args.target)
  for name, asset in assets.items():
    if not os.path.exists(os.path.join(args.target, name)):
      asset.delete()

  assets = { asset.name: asset for asset in release.assets() }

  for f in glob.glob(os.path.join(args.target, '*')):
    if not os.path.basename(f) in assets:
      attempts = 0
      while attempts < 5:
        print(' +', os.path.basename(f), end='')
        content_type, encoding = mimetypes.guess_type(f)
        release.upload_asset(asset=f, name=os.path.basename(f), content_type=content_type)
        time.sleep(5)
        print(f' ({humanize(f)})')
        if (s := assetsize(f)) != os.path.getsize(f):
          print(' ? verify: found undersized', os.path.basename(f), 'of size', humanize(s), 'where I need', humanize(os.path.getsize(f)))
          asset = next(asset for asset in release.assets() if asset.name == os.path.basename(f))
          asset.delete()
          time.sleep(5)
        else:
          break

      print(' -', name)
else:
  print('restoring cache from', os.environ['GITHUB_REPOSITORY'] + '@' + args.release, 'to', args.target)
  for name, asset in assets.items():
    print(' +', name, end='')
    retrieve(asset.url, os.path.join(args.target, name))
    print(f' ({humanize(os.path.join(args.target, name))})')
